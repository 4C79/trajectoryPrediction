#include <stdio.h>
#include <iostream>
#include <WinSock2.h>
#include <string>
#include<vector>

#pragma comment (lib,"WS2_32.lib")
#define _WINSOCK_DEPRECATED_NO_WARNINGS
#pragma warning(disable:4996)
using namespace std;

#pragma pack(push)
#pragma pack(1)
typedef struct viewData2 {
	int id;  //编号
	int type; //模型类型例如导弹靶标等
	int state; //模型状态例如飞行爆炸销毁等
	float x; //模型坐标x
	float y; //模型坐标y
	float z; //模型坐标z
	float head; //模型偏航角
	float pitch; //模型俯仰角
	float roll; // 模型滚转角
}ViewDATA_Struct2, * PViewDATA_Struct2;
#pragma pack(pop)



int main(int argc, char* argv[])
{
	vector<double>x{-26,-24,-21,-19,-18,-17,-15,-14,-12,-11,-9,-8,-7,-5,-4,-3,-1,-0.6,0.7,2,3,4,5,6,7,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,26};
	vector<double>y{ 30.8693,30.342,29.0091,28.6909,28.3654,28.1159,27.911,27.6491,27.3508,27.1602,26.927,26.7457,26.5455,26.3955,26.1274,25.962,25.7578,
   25.5547,25.2603,25.1141,24.8993,24.6777,24.5185,24.2316,24.0412,23.7952,23.5406,23.4065,23.1469,22.8894,22.6834,22.3865,22.1132,
  21.8728,21.6162 ,21.3504,21.0538,20.8366,20.6751,20.4603,20.2303,19.9344 };
	vector<double>z{ 2067.8798,2068.1111,2067.1818,2066.7837,2066.3501,2065.7863,2065.1809,2064.4919,2063.7588,2062.9479,2062.0407,2061.105,2060.0374,2058.9303,
 2057.6505, 2056.4028,2055.0362,2053.6027,2052.0728,2050.4995,2048.88,2047.0896,2045.293,2043.3738,2041.4156,2039.3714,2037.299,2035.2344,
 2032.9828,2030.7065,2028.4324,2025.9754,2023.4574,2020.9736,2018.3242,2015.6623,2012.8194,2010.0308,2007.2611,2004.1936,2001.1727,2000.42 };

	/*vector<double>z{1891.5, 1871.0, 1824.5, 1784.5, 1751.0, 1721.5, 1688.5, 1634.0, 1600.0, 1549.0, 1516.0, 1481.0, 1453.5, 1402.5, 1349.0, 1320.5, 1283.0, 1252.5, 1212.5, 1167.5, 1126.0, 1084.0, 1045.5, 1011.5, 975.5, 917.5, 890.5, 851.5, 824.5, 775.0, 726.0, 700.0, 670.5, 631.5};
	vector<double>x{ 1702.0, 1716.5, 1725.5, 1729.0, 1727.0, 1717.0, 1715.0, 1715.0, 1693.0, 1688.0, 1672.0, 1648.5, 1621.5, 1597.5, 1583.0, 1539.5, 1517.0, 1474.0, 1429.0, 1391.0, 1342.0, 1300.5, 1254.5, 1199.5, 1138.5, 1095.5, 1032.5, 966.0, 894.0, 828.0, 762.5, 683.5, 603.0, 527.5 };
	vector<double>y{ 56.33, 71.04, 85.75, 100.45, 115.16, 129.86, 144.57, 159.27, 173.98, 188.69, 203.39, 218.1, 232.8, 247.51, 262.22, 276.92, 291.63, 306.33, 321.04, 335.75, 350.45, 365.16, 379.86, 394.57, 409.27, 423.98, 438.69, 453.39, 468.1, 482.8, 497.51, 512.22, 526.92, 541.63 };
	*/




	/*vector<double>x{ 1891.5, 1871.0, 1824.5, 1784.5, 1751.0, 1721.5, 1688.5, 1634.0, 1600.0, 1549.0, 1516.0, 1481.0, 1453.5, 1402.5, 1349.0, 1320.5, 1283.0, 1252.5, 1212.5, 1167.5, 1126.0, 1084.0, 1045.5, 1011.5, 975.5, 917.5, 890.5, 851.5, 824.5, 775.0, 726.0, 700.0, 670.5, 631.5 };
	vector<double>z{ 1702.0, 1716.5, 1725.5, 1729.0, 1727.0, 1717.0, 1715.0, 1715.0, 1693.0, 1688.0, 1672.0, 1648.5, 1621.5, 1597.5, 1583.0, 1539.5, 1517.0, 1474.0, 1429.0, 1391.0, 1342.0, 1300.5, 1254.5, 1199.5, 1138.5, 1095.5, 1032.5, 966.0, 894.0, 828.0, 762.5, 683.5, 603.0, 527.5 };
	vector<double>y{ 56.33, 71.04, 85.75, 100.45, 115.16, 129.86, 144.57, 159.27, 173.98, 188.69, 203.39, 218.1, 232.8, 247.51, 262.22, 276.92, 291.63, 306.33, 321.04, 335.75, 350.45, 365.16, 379.86, 394.57, 409.27, 423.98, 438.69, 453.39, 468.1, 482.8, 497.51, 512.22, 526.92, 541.63 };*/

	//for (int i = 0; i < x.size(); i++) {
	//	ViewDATA_Struct2 udpPack = { 1001,1,1,x[x.size() - 1 - i], y[i], z[x.size() - 1 - i],0,0,100 };

	for (int i = 0; i < x.size(); i++) {
		//ViewDATA_Struct2 udpPack = { 1001,1,1,x[i], y[i], z[i],0,0,100 };
		ViewDATA_Struct2 udpPack = { 1002,1,1,x[i]+1, y[i]+1, z[i]+10,0,0,100 };

		char* pPack = (char*)&udpPack;
		WSADATA wsaData;                                    //指向WinSocket信息结构的指针
		SOCKET serSocket;                                //创建套接字
		SOCKADDR_IN serUdpServ, clientAddr;                              //指向通信对象的结构体指针                          

		//*************************** 第一步初始化Winsock   *****************************//
		if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0)     //进行WinSocket的初始化
		{
			printf("Can't initiates windows socket!Program stop.\n");//初始化失败返回-1
			return -1;
		}
		//********************   第二步建立一个数据报类型的UDP套接字  ******************//
		serSocket = socket(PF_INET, SOCK_DGRAM, 0);

		serUdpServ.sin_family = AF_INET;
		serUdpServ.sin_addr.s_addr = inet_addr("127.0.0.1");
		//saUdpServ.sin_addr.s_addr = htonl ( INADDR_BROADCAST );
		serUdpServ.sin_port = htons(8001);               //发送用的端口，可以根据需要更改

		clientAddr.sin_family = AF_INET;
		clientAddr.sin_port = htons(5150);
		clientAddr.sin_addr.s_addr = inet_addr("127.0.0.1");
		if (bind(serSocket, (sockaddr*)&serUdpServ, sizeof(serUdpServ)) == SOCKET_ERROR)
		{
			printf("bind error !");
			closesocket(serSocket);
			return 0;
		}
		//while (1) {
			//Sleep(1000);
			//**********************  第三步使用sendto函数进行通信    *************************// 
		Sleep(1000);
		sendto(serSocket, pPack, sizeof(udpPack), 0, (struct sockaddr*)&clientAddr, sizeof(clientAddr));
		//*********************   第四步关闭socket  ***************************************//
		closesocket(serSocket);         //关闭监听socket
		WSACleanup();
	}
	return 0;
}

//{1001, 1, 1, 0.00, 0.00, 2652.0, 0.00, 0.00, 0.00}
/*
* {30.8693,30.342,29.0091,28.6909,28.3654,28.1159,27.911,27.6491,27.3508,27.1602,26.927,26.7457,26.5455,26.3955,26.1274,25.962,25.7578
   25.5547,25.2603,25.1141,24.8993,24.6777,24.5185,24.2316,24.0412,23.7952,23.5406,23.4065,23.1469,22.8894,22.6834,22.3865,22.1132
  21.8728,21.6162 ,21.3504,21.0538,20.8366,20.6751,20.4603,20.2303,19.9344};
  {2067.8798,2068.1111,2067.1818,2066.7837,2066.3501,2065.7863,2065.1809,2064.4919,2063.7588,2062.9479,2062.0407,2061.105,2060.0374,2058.9303
 2057.6505, 2056.4028,2055.0362,2053.6027,2052.0728,2050.4995,2048.88,2047.0896,2045.293,2043.3738,2041.4156,2039.3714,2037.299,2035.2344,
 2032.9828,2030.7065,2028.4324,2025.9754,2023.4574,2020.9736,2018.3242,2015.6623,2012.8194,2010.0308,2007.2611,2004.1936,2001.1727,-2000.42}
p1点三维坐标(-26.2072, 30.8693, 2067.8798)
p2点三维坐标(-24.4993, 30.342, 2068.1111)
p4点三维坐标(-21.5442, 29.0091, 2067.1818)
p5点三维坐标(-19.9992, 28.6909, 2066.7837)
p6点三维坐标(-18.4946, 28.3654, 2066.3501)
p7点三维坐标(-17.0204, 28.1159, 2065.7863)
p8点三维坐标(-15.6118, 27.911, 2065.1809)
p9点三维坐标(-14.1161, 27.6491, 2064.4919)
p10点三维坐标(-12.7201, 27.3508, 2063.7588)
p11点三维坐标(-11.2543, 27.1602, 2062.9479)
p12点三维坐标(-9.93335, 26.927, 2062.0407)
p13点三维坐标(-8.51408, 26.7457, 2061.105)
p14点三维坐标(-7.19287, 26.5455, 2060.0374)
p15点三维坐标(-5.77395, 26.3955, 2058.9303)
p16点三维坐标(-4.41718, 26.1274, 2057.6505)
p17点三维坐标(-3.20657, 25.962, 2056.4028)
p18点三维坐标(-1.87595, 25.7578, 2055.0362)
p19点三维坐标(-0.5575, 25.5547, 2053.6027)
p20点三维坐标(0.685189, 25.2603, 2052.0728)
p21点三维坐标(1.96253, 25.1141, 2050.4995)
p22点三维坐标(3.23182, 24.8993, 2048.88)
p23点三维坐标(4.42016, 24.6777, 2047.0896)
p24点三维坐标(5.63318, 24.5185, 2045.293)
p25点三维坐标(6.81636, 24.2316, 2043.3738)
p26点三维坐标(7.93799, 24.0412, 2041.4156)
p27点三维坐标(9.07195, 23.7952, 2039.3714)
p28点三维坐标(10.1978, 23.5406, 2037.299)
p29点三维坐标(11.3261, 23.4065, 2035.2344)
p30点三维坐标(12.4119, 23.1469, 2032.9828)
p31点三维坐标(13.5328, 22.8894, 2030.7065)
p32点三维坐标(14.6478, 22.6834, 2028.4324)
p33点三维坐标(15.6674, 22.3865, 2025.9754)
p34点三维坐标(16.7675, 22.1132, 2023.4574)
p35点三维坐标(17.8378, 21.8728, 2020.9736)
p36点三维坐标(18.8407, 21.6162, 2018.3242)
p37点三维坐标(19.8445, 21.3504, 2015.6623)
p38点三维坐标(20.8969, 21.0538, 2012.8194)
p39点三维坐标(21.9191, 20.8366, 2010.0308)
p40点三维坐标(22.9348, 20.6751, 2007.26117)
p41点三维坐标(23.9314, 20.4603, 2004.19369)
p42点三维坐标(24.9431, 20.2303, 2001.17275)
p43点三维坐标(26.2308, 19.9344, 2000.420087)
*/